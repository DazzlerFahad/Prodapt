package com.fileupload.Service;

import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fileupload.Entity.FileDB;
import com.fileupload.Repository.FileDBRepsitory;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.ss.usermodel.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Service
public class ExcelDataServiceImpl implements IExcelDataService{

    @Value("${app.upload.file:${user.home}}")
    public String EXCEL_FILE_PATH;

    @Autowired
    FileDBRepsitory repo;

    Workbook workbook;

    public List<FileDB> getExcelDataAsList()  {

        List<String> list = new ArrayList<String>();

        // Create a DataFormatter to format and get each cell's value as String
        DataFormatter dataFormatter = new DataFormatter();

        // Create the Workbook
        try {
            try {
                workbook = WorkbookFactory.create(new File(EXCEL_FILE_PATH));
            } catch (org.apache.poi.openxml4j.exceptions.InvalidFormatException e) {
                throw new RuntimeException(e);
            }
        } catch (EncryptedDocumentException | IOException e) {
            e.printStackTrace();
        }

        // Retrieving the number of sheets in the Workbook
        System.out.println("-------Workbook has '" + workbook.getNumberOfSheets() + "' Sheets-----");

        // Getting the Sheet at index zero
        Sheet sheet = workbook.getSheetAt(0);

        // Getting number of columns in the Sheet
        int noOfColumns = sheet.getRow(0).getLastCellNum();
        System.out.println("-------Sheet has '"+noOfColumns+"' columns------");

        // Using for-each loop to iterate over the rows and columns
        for (Row row : sheet) {
            for (Cell cell : row) {
                String cellValue = dataFormatter.formatCellValue(cell);
                list.add(cellValue);
            }
        }

        // filling excel data and creating list as List<Invoice>
        List<FileDB> invList = createList(list, noOfColumns);

        // Closing the workbook
        try {
            workbook.close();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return invList;
    }

    private List<FileDB> createList(List<String> excelData, int noOfColumns) {

        ArrayList<FileDB> invList = new ArrayList<FileDB>();

        int i = noOfColumns;
        do {
            FileDB inv = new FileDB();

//			inv.setName(excelData.get(i));
//			inv.setAmount(Double.valueOf(excelData.get(i + 1)));
//			inv.setNumber(excelData.get(i + 2));
//			inv.setReceivedDate(excelData.get(i + 2));

            inv.setId(excelData.get(i));
            inv.setOlt(String.valueOf(excelData.get(i + 1)));
            inv.setOltNeId(String.valueOf(excelData.get(i + 2)));
            inv.setPon(excelData.get(i + 3));
            inv.setSite(excelData.get(i + 4));
            inv.setSerialNumber(excelData.get(i + 5));
            inv.setType(excelData.get(i + 6));
            inv.setZone(excelData.get(i + 7));

            invList.add(inv);
            i = i + (noOfColumns);

        } while (i < excelData.size());
        return invList;
    }

    @Override
    public int saveExcelData(List<FileDB> invoices) {
        invoices = repo.saveAll(invoices);
        return invoices.size();
    }

}
